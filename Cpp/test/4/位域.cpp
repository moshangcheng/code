/*
 位域的定义如下 ：

 有些信息在存储时，并不需要占用一个完整的字节， 而只需占几个
 或一个二进制位。例如在存放一个开关量时，只有0和1 两种状态， 用一位
 二进位即可。为了节省存储空间，并使处理简便，Ｃ语言又提供了一种数据
 结构，称为“位域”或“位段”。所“位域”是把一个字节中的二进位划分
 为几个不同的区域， 并说明每个区域的位数。每个域有一个域名，允许在
 程序中按域名进行操作。 这样就可以把几个不同的对象用一个字节的二进制
 位域来表示。一、位域的定义和位域变量的说明位域定义与结构定义相
 仿，其形式为：
 struct 位域结构名
 { 位域列表 };
 其中位域列表的形式为： 类型说明符 位域名：位域长度

 位域有几点说明：

 1、一个字节所剩空间不够存放另一位域时，应从下一单元起存放该位域。
 也可以有意使某位域从下一单元开始，比如利用空域和无位域名的位域。

 2、位域的长度不能大于数据类型本身的长度，比如int类型就能超过32位二进位。
 有其他人说是不能超过8位，我在我的机子上（linux as4系统）是可以实现
 int ：32的位域长度的。莫非是位域重新进行定义了？

 3、位域可以无位域名，这时它只用来作填充或调整位置。无名的位域是不
 能使用的。

 二、位域的使用位域的使用和结构成员的使用相同，
 其一般形式为： 位域变量名·位域名
 */
#include <cstdio>
#include <cstdlib>
using namespace std;

struct bs {
	char a :2;
	int b :4;
}__attribute__((packed))(( packed));

int main() {
	bs bit, *pbit;
	bit.a = 0;
	bit.b = 123;
	pbit = &bit;
	printf("%d %d %d\n", bit.a, bit.b, *(char*) pbit);
	system("pause");
	return 0;
}
