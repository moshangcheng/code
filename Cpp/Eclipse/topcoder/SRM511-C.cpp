/**
 * @author moshangcheng
 * @version 1.0
 * @date 2011-7-20 下午12:57:05
 * @brief 搜索时根据所有使用过的数的或来判断哪些数已经使用过
 */
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iterator>

using namespace std;

const int SIZE = 51;

class FiveHundredEleven {
public:
	vector<int> cards;
	int S[SIZE][512];
	bool solve(int count, int orSum) {
		if (orSum == 511) {
			return true;
		}
		if (count == cards.size()) {
			return false;
		}
		if (S[count][orSum] >= 0) {
			return S[count][orSum] == 1;
		}
		int notUsed = 0;
		for (int i = 0; i < cards.size(); i++) {
			//if (orSum|cards[i]) doesn't equal orSum, cards[i] is nerver used
			if ((orSum | cards[i]) != orSum) {
				notUsed++;
				if (!solve(count + 1, orSum | cards[i])) {
					return S[count][orSum] = 1;
				}
			}
		}
		//(cards.size()-count-notUsed) is the number of cards nerver used
		if (cards.size() - count - notUsed > 0 && !solve(count + 1, orSum)) {
			S[count][orSum] = 1;
			for (int i = count + 1; i < cards.size(); i++) {
				S[i][orSum] = 1 - S[i - 1][orSum];
			}
			return S[count][orSum];
		}
		return S[count][orSum] = 0;
	}
	string theWinner(vector<int> cards) {
		this->cards = cards;
		//initial
		fill(S[0], S[SIZE], -1);
		return solve(0, 0) ? "Fox Ciel" : "Toastman";
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<int> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	FiveHundredEleven *obj;
	string answer;
	obj = new FiveHundredEleven();
	clock_t startTime = clock();
	answer = obj->theWinner(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<int> p0;
	string p1;

	{
		// ----- test 0 -----
		int t0[] = { 3, 5, 7, 9, 510 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "Fox Ciel";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = { 0, 0, 0, 0 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "Toastman";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = { 511 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "Toastman";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = { 5, 58, 192, 256 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "Fox Ciel";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = { 141, 248, 387, 366, 145, 54, 339, 246, 246, 273, 119, 484,
				301, 423, 294, 81, 441, 150, 45, 396, 127, 169, 414, 397, 161,
				413, 412, 106, 397, 407, 330, 380, 425, 482, 356, 37, 291, 24,
				334, 456, 69, 13, 351, 279, 141, 64, 152, 449, 347, 179 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "Fox Ciel";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		int t0[] = { 305, 183, 352, 175, 220, 212, 27, 421, 241, 221, 221, 244,
				136, 487, 350, 132, 253, 46, 197, 241, 351, 403, 230, 404, 246,
				176, 195, 15, 127, 96, 263, 199, 188, 308, 121, 219, 93, 318,
				460, 73, 475, 62, 91, 141, 411, 328, 221, 310, 470, 265 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "Fox Ciel";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
