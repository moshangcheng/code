/**
 * @author moshangcheng
 * @version 1.0
 * @date 2011-7-21 下午10:10:00
 * @brief TopCoder SRM508 B
 * 本题优化的关键是：
 * solve(N, 1, depth + M - 1);
 * solve(N, N, depth + N - M);
 * 这两行代码。shift和divide完全正交。
 * shift操作和divide操作可以互换，即最短路径等价为先divide，最后再shift。
 * 使用factorCache，但是没有使用answerCache，因为使用了全局最短路径来剪枝。
 * 因此，如果采用剪枝技术，就无法使用answerCache来避免重复计算。
 */

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAX = 1000001;
bool notp[MAX];
vector<int> prime;
map<int, vector<int> > factorCache;

class DivideAndShift {
public:
	int minStep;

	DivideAndShift() {
		if (!prime.empty()) {
			return;
		}
		fill(notp, notp + MAX, 0);
		for (int i = 2; i < MAX; i++) {
			if (!notp[i]) {
				prime.push_back(i);
			}
			for (int j = 0; j < prime.size() && prime[j] * i < MAX; j++) {
				notp[prime[j] * i] = 1;
				if (i % prime[j] == 0) {
					break;
				}
			}
		}
	}

	void solve(int N, int M, int depth) {
		if (depth >= minStep) {
			return;
		}
		if (M == 1) {
			minStep = depth;
		} else if (M == 0 || M == N) {
			minStep = depth + 1;
		} else if (!notp[N]) {
			minStep = depth + 1;
		} else {
			if (factorCache.find(N) == factorCache.end()) {
				vector<int> factor;
				for (int i = 2; i * i <= N; i++) {
					if (N % i == 0) {
						if (!notp[i]) {
							factor.push_back(i);
						}
						if (!notp[N / i]) {
							factor.push_back(N / i);
						}
					}
				}
				factorCache[N] = factor;
			}
			vector<int>& factor = factorCache[N];
			for (int i = 0; i < factor.size(); i++) {
				solve(N / factor[i], M % (N / factor[i]), depth + 1);
			}
			solve(N, 1, depth + M - 1);
			solve(N, N, depth + N - M);
		}
	}

	int getLeast(int N, int M) {
		minStep = MAX;
		solve(N, M, 0);
		return minStep;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	DivideAndShift *obj;
	int answer;
	obj = new DivideAndShift();
	clock_t startTime = clock();
	answer = obj->getLeast(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;

	{
		// ----- test 0 -----
		p0 = 56;
		p1 = 14;
		p2 = 3;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 49;
		p1 = 5;
		p2 = 2;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 256;
		p1 = 7;
		p2 = 6;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 6;
		p1 = 1;
		p2 = 0;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 77777;
		p1 = 11111;
		p2 = 2;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		p0 = 524288;
		p1 = 625;
		p2 = 15;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 6 -----
		p0 = 876542;
		p1 = 123537;
		p2 = 1;
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
