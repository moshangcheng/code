/**
 * @author moshangcheng
 * @version 1.0
 * @date 2011-7-21 下午09:39:34
 * @brief TopCoder SRM508 A
 */
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAX = 500;

class CandyShop {
public:
	int status[MAX][MAX];

	void solve(int x, int y, int r) {
		for (int i = 0; i <= r; i++) {
			for (int j = 0; i + j <= r; j++) {
				if (i == 0 || j == 0) {
					status[x + i][y + j]++;
					if (i != 0 || j != 0) {
						status[x - i][y - j]++;
					}
				} else {
					status[x + i][y + j]++;
					status[x - i][y + j]++;
					status[x + i][y - j]++;
					status[x - i][y - j]++;
				}
			}
		}
	}

	int countProbablePlaces(vector<int> X, vector<int> Y, vector<int> R) {
		int sum = 0;
		int len = X.size();
		fill(status[0], status[MAX], 0);
		for (int i = 0; i < len; i++) {
			solve(X[i] + 200, Y[i] + 200, R[i]);
		}
		for (int i = 0; i < MAX; i++) {
			for (int j = 0; j < MAX; j++) {
				if (status[i][j] == len)
					sum++;
			}
		}
		return sum;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<int> p0, vector<int> p1,
		vector<int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	CandyShop *obj;
	int answer;
	obj = new CandyShop();
	clock_t startTime = clock();
	answer = obj->countProbablePlaces(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector<int> p0;
	vector<int> p1;
	vector<int> p2;
	int p3;

	{
		// ----- test 0 -----
		int t0[] = { 0 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 0 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 1 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 5;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = { 0 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 0 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 2 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 13;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = { 2, 3 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1, -1 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 2, 2 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 4;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = { 2, 3, 5 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 1, -1, 0 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 2, 2, 3 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 3;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = { -100, -100, -100, 0, 0, 0, 100, 100, 100 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { -100, 0, 100, -100, 0, 100, -100, 0, 100 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 0;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		int t0[] = { -3, 3, 5, 5 };
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = { 4, 5, -2, 0 };
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = { 10, 11, 8, 6 };
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 33;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
