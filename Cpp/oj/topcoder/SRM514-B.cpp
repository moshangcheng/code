/**
 * @author moshangcheng
 * @version 1.0
 * @date 2011-8-10 上午11:27:30
 * @brief TopCoder SRM514 A
 */
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int SIZE = 61;
const int MAX = 31;
int delta[4][2] = { { 1, 1 }, { 1, -1 }, { -1, 1 }, { -1, -1 } };

bool v[SIZE][SIZE];
vector<pair<int, int> > nodeQueue;

class MagicalGirlLevelTwoDivTwo {
public:
	inline bool isVisited(int x, int y) {
		return v[x + MAX - 1][y + MAX - 1];
	}

	string isReachable(vector<int> jumpTypes, int x, int y) {
		fill(v[0], v[SIZE], 0);
		nodeQueue.clear();
		bool flag = false;
		nodeQueue.push_back(make_pair(0, 0));
		v[MAX - 1][MAX - 1] = true;
		for (int i = 0; i < nodeQueue.size(); i++) {
			int cntX = nodeQueue[i].first;
			int cntY = nodeQueue[i].second;
			if (cntX == x && cntY == y) {
				flag = true;
			}
			for (int j = 0; j < jumpTypes.size(); j++) {
				for (int k = 0; k < 4; k++) {
					int nextX = cntX - jumpTypes[j] * delta[k][0];
					int nextY = cntY - delta[k][1];
					if (abs(nextX) < MAX && abs(nextY) < MAX && !isVisited(nextX, nextY)) {
						nodeQueue.push_back(make_pair(nextX, nextY));
						v[nextX + MAX - 1][nextY + MAX - 1] = true;
					}
					nextX = cntX - delta[k][0];
					nextY = cntY - jumpTypes[j] * delta[k][1];
					if (abs(nextX) < MAX && abs(nextY) < MAX && !isVisited(nextX, nextY)) {
						nodeQueue.push_back(make_pair(nextX, nextY));
						v[nextX + MAX - 1][nextY + MAX - 1] = true;
					}
				}
			}
		}
		return flag ? "YES" : "NO";
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	MagicalGirlLevelTwoDivTwo *obj;
	string answer;
	obj = new MagicalGirlLevelTwoDivTwo();
	clock_t startTime = clock();
	answer = obj->isReachable(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;
	int p2;
	string p3;

	{
	// ----- test 0 -----
	int t0[] = {2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 4;
	p3 = "YES";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 4;
	p3 = "NO";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -30;
	p2 = 27;
	p3 = "YES";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {29};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 29;
	p2 = 0;
	p3 = "NO";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
