/**
 * @author moshangcheng
 * @version 1.0
 * @date 2011-7-20 下午01:44:12
 * @brief
 */
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAX = 5000;

class TheLuckyGameDivTwo {
public:
	int luckyNum[MAX];

	TheLuckyGameDivTwo() {
		luckyNum[0] = 0;
		for (int i = 1; i < MAX; i++) {
			int unluckyDigit = 0;
			luckyNum[i] = luckyNum[i - 1];
			for (int j = i; j > 0; j /= 10) {
				if (j % 10 != 7 && j % 10 != 4) {
					unluckyDigit++;
				}
			}
			if (unluckyDigit == 0) {
				luckyNum[i]++;
			}
		}
	}

	int find(int a, int b, int jLen, int bLen) {
		int maxSum = -1;
		for (int i = a, end = i + jLen - 1; end <= b; i++, end++) {
			int minSum = MAX;
			for (int j = i, k = j + bLen - 1; k <= end; j++, k++) {
				if (minSum > luckyNum[k] - luckyNum[j - 1]) {
					minSum = luckyNum[k] - luckyNum[j - 1];
				}
			}
			if (maxSum < minSum) {
				maxSum = minSum;
			}
		}
		return maxSum;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3,
		bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << ","
			<< p3;
	cout << "]" << endl;
	TheLuckyGameDivTwo *obj;
	int answer;
	obj = new TheLuckyGameDivTwo();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
	int p4;

	{
		// ----- test 0 -----
		p0 = 1;
		p1 = 10;
		p2 = 2;
		p3 = 1;
		p4 = 0;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 1;
		p1 = 100;
		p2 = 100;
		p3 = 100;
		p4 = 6;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 4;
		p1 = 8;
		p2 = 3;
		p3 = 2;
		p4 = 1;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 1;
		p1 = 100;
		p2 = 75;
		p3 = 50;
		p4 = 2;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 3373;
		p1 = 4742;
		p2 = 461;
		p3 = 336;
		p4 = 4;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
